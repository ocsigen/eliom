<<code language="ocaml" | sig
  module W :
    sig
      type 'a t = 'a
      val return : 'a -> 'a t
      type ('a, 'b) ft = 'a -> 'b
      val fmap : ('a, 'b) ft -> 'a t -> 'b t
      type 'a tlist = 'a list
      val nil : unit -> 'a tlist
      val singleton : 'a t -> 'a tlist
      val cons : 'a t -> 'a tlist -> 'a tlist
      val append : 'a tlist -> 'a tlist -> 'a tlist
      val map : ('a, 'b) ft -> 'a tlist -> 'b tlist
    end
  type 'a wrap = 'a
  type 'a list_wrap = 'a list
  type uri
  val string_of_uri : (uri, string) W.ft
  val uri_of_string : (string, uri) W.ft
  type aname = string
  type event_handler =
      (Js_of_ocaml.Dom_html.event Js_of_ocaml.Js.t -> unit)
      Eliom_client_value.t
  type mouse_event_handler =
      (Js_of_ocaml.Dom_html.mouseEvent Js_of_ocaml.Js.t -> unit)
      Eliom_client_value.t
  type keyboard_event_handler =
      (Js_of_ocaml.Dom_html.keyboardEvent Js_of_ocaml.Js.t -> unit)
      Eliom_client_value.t
  type touch_event_handler =
      (Js_of_ocaml.Dom_html.touchEvent Js_of_ocaml.Js.t -> unit)
      Eliom_client_value.t
  type attrib
  val float_attrib : aname -> float wrap -> attrib
  val int_attrib : aname -> int wrap -> attrib
  val string_attrib : aname -> string wrap -> attrib
  val space_sep_attrib : aname -> string list wrap -> attrib
  val comma_sep_attrib : aname -> string list wrap -> attrib
  val event_handler_attrib : aname -> event_handler -> attrib
  val mouse_event_handler_attrib : aname -> mouse_event_handler -> attrib
  val keyboard_event_handler_attrib :
    aname -> keyboard_event_handler -> attrib
  val touch_event_handler_attrib : aname -> touch_event_handler -> attrib
  val uri_attrib : aname -> uri wrap -> attrib
  val uris_attrib : aname -> uri list wrap -> attrib
  type elt
  type ename = string
  val empty : unit -> elt
  val comment : string -> elt
  val pcdata : string wrap -> elt
  val encodedpcdata : string wrap -> elt
  val entity : string -> elt
  val leaf : ?a:attrib list -> ename -> elt
  val node : ?a:attrib list -> ename -> elt list_wrap -> elt
  val cdata : string -> elt
  val cdata_script : string -> elt
  val cdata_style : string -> elt
  type separator = Space | Comma
  val aname : attrib -> aname
  type acontent = private
      AFloat of float
    | AInt of int
    | AStr of string
    | AStrL of separator * string list
  val acontent : attrib -> acontent
  type econtent = private
      Empty
    | Comment of string
    | EncodedPCDATA of string
    | PCDATA of string
    | Entity of string
    | Leaf of ename * attrib list
    | Node of ename * attrib list * elt list
  val content : elt -> econtent
  type caml_event_handler
  val make_process_node : ?id:string -> elt -> elt
  val make_request_node : ?reset:bool -> elt -> elt
  val uri_of_fun : (unit -> string) -> uri
  type node_id
  val get_node_id : elt -> Eliom_content.Xml.node_id
  val make_event_handler_table :
    elt -> Eliom_runtime.RawXML.event_handler_table
  val make_client_attrib_table :
    elt -> Eliom_runtime.RawXML.client_attrib_table
  val caml_event_handler :
    (Js_of_ocaml.Dom_html.event Js_of_ocaml.Js.t -> unit)
    Eliom_client_value.t -> Eliom_content.Xml.caml_event_handler
  type racontent =
      RA of acontent
    | RAReact of acontent option React.signal
    | RACamlEventHandler of Eliom_content.Xml.caml_event_handler
    | RALazyStr of string Eliom_lazy.request
    | RALazyStrL of separator * string Eliom_lazy.request list
    | RAClient of string * attrib option * Eliom_lib.poly
  val racontent : attrib -> Eliom_content.Xml.racontent
  val lazy_node :
    ?a:attrib list -> ename -> elt list Eliom_lazy.request -> elt
  val wrap : elt -> 'a -> 'a Eliom_wrap.wrapped_value
end >>