=Eliom
//The full-stack OCaml Web and mobile framework//

Eliom is a framework for building client/server Web and mobile
applications in OCaml.

It can be used both as a traditional server-side Web framework
or to implement complex client-server applications.

Eliom transforms OCaml into a multi-tier language, making it possible to
implement both the server and client parts of a Web and mobile app
as a single program.
This simplifies a lot the communication between server and client.

Applications can run on any Web browser or mobile device (iOS,
Android), saving from the need to develop one version for each
platform.

Eliom has support for reactive pages (generated on server or client),
advanced session mechanism, server to client communication,
continuation based Web programming, etc.

==Installation Instructions

{{{
opam install eliom
}}}

==A quick tour

Here is a quick overview of what programming with Eliom look like.

Defining a service on path {{{/foo}}}, taking any GET parameters:

<<code language="ocaml" class="server"|
let myservice =
  Eliom_service.create
    ~path:(Eliom_service.Path ["foo"])
    ~meth:(Eliom_service.Get (Eliom_parameter.any))
    ()

let () =
  Eliom_registration.Html.register ~service:myservice
    (fun get_params () ->
      Lwt.return
         Eliom_content.Html.F.(html (head (title (txt "")))
                                    (body [h1 [txt "Hello"]])))
>>

Inserting a link towards that service, with parameters:

<<code language="ocaml" class="server"|
Eliom_content.Html.D.a ~service:myservice [txt "Home"] [("param1", "v1"); ("param2", "v2")]
>>

Event handlers are written in OCaml:

<<code language="ocaml" class="server"|
div ~a:[a_onclick [%client fun ev -> ... ]] [ ... ]
>>

The client-side and server programs are written as a single program:

<<code language="ocaml" class="server"|
let%server a = ... (* code for the server part of the application *)
>>
<<code language="ocaml" class="client"|
let%client b = ... (* code for the client part of the application *)
>>
<<code language="ocaml" class="shared"|
let%shared a = ... (* code that will be included in both parts *)
>>

Using a server-side value in client-side code:

<<code language="ocaml" class="server"|
let%server a = ...
>>
<<code language="ocaml" class="client"|
let%client f () =
  [%client (print_endline ~%a : unit)] (* print in browser console *)
>>

Calling a server function from the client program:

<<code language="ocaml" class="shared"|
let%rpc f (x : int) : unit Lwt.t = ... (* server-side code *)
>>
<<code language="ocaml" class="client"|
let%client () =
  let%lwt r = f 4 in
  ...
>>

Saving session data on the server using Eliom references:

<<code language="ocaml" class="server"|
let%server r = Eliom_reference.eref ~scope:Eliom_common.default_session_scope 0

let%server f () =
  let%lwt v = Eliom_reference.get r in
  Eliom_reference.set r (v + 1);
  ...

>>

Where scope can be:
* {{{Eliom_common.default_session_scope}}} (different value for each browser),
* {{{Eliom_common.default_process_scope}}} (different value for each tab),
* {{{Eliom_common.default_group_scope}}} (different value for each user),
* {{{Eliom_common.site_scope}}} (value for the whole site),
* {{{Eliom_common.global_scope}}} (global value for the whole server).
Eliom references are persistant if you add optional parameter `~persistent`
to function `Eliom_reference.eref`.

== Learning Eliom

To learn Eliom, read one the main documentation pages first:
<<a_manual project="tuto" chapter="basics"|application development>> (client-server programming)
or
<<a_manual project="tuto" chapter="basics-server"|website development>> (server-side programming).

Write your first Web and mobile application with Eliom using
[[wiki("ocsigen-start"):|Ocsigen Start]]

If you want to use Eliom as a traditional server-side Web framework,
have a look at these tutorials:
* <<a_manual project="tuto" chapter="basicwebsite"|A basic Web site in OCaml>>
* <<a_manual project="tuto" chapter="how-to-register-session-data"|Session data: Eliom references>>
* <<a_manual project="tuto" chapter="interaction"|Service based Web programming>>

The full [[intro|reference manual]], for technical details
