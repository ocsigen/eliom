description = "Eliom: module for generating pages"
version = "dev"

package "server" (

  description = "Eliom: server-side"
  version = "[distributed with Eliom]"
  directory = "server"

  requires = "%%NAME%%.server.base"
  requires(syntax, preprocessor) = "%%SDEPS%%"
  archive(syntax, preprocessor) = "-ignore dummy"

  package "base" (

    description = "Eliom: server-side (without external syntax extension)"
    version = "[distributed with Eliom]"

    requires = "%%DEPS%%"
    archive(byte) = "%%NAME%%.cma"
    archive(native) = "%%NAME%%.cmxa"

  )

  package "syntax" (
    description = "Syntax extension: spliting client and server code (server side)"
    version = "[distributed with Eliom]"
    directory = "syntax"
    package "base" (
      requires(syntax, preprocessor) = "%%NAME%%.syntax.common"
      requires(syntax, toploop) = "%%NAME%%.syntax.common"
      archive(syntax, preprocessor) = "pa_eliom_client_server.cmo"
      archive(syntax, toploop) = "pa_eliom_client_server.cmo"
    )
    requires(syntax, preprocessor) = "%%SDEPS%%,%%NAME%%.server.syntax.base"
    requires(syntax, toploop) = "%%SDEPS%%,%%NAME%%.server.syntax.base"
    requires(preprocessor, syntax, pkg_type_conv) = "type_conv"
    archive(syntax, preprocessor) = "-ignore dummy"
  )

)

package "client" (

  description = "Eliom: client-side"
  version = "[distributed with Eliom]"

  requires = "%%NAME%%.client.base"
  requires(syntax, preprocessor) = "%%CSDEPS%%"
  archive(syntax, preprocessor) = "-ignore dummy"
  directory = "client"

  package "base" (

    description = "Eliom: client-side (without external syntax extension)"
    version = "[distributed with Eliom]"

    archive(byte) = "%%NAME%%_client.cma eliom_client_main.cmo"

    requires = "%%CDEPS%%"
    archive(syntax,preprocessor) = "-ignore dummy"

    linkopts(javascript) = "+%%NAME%%.client/eliom_client.js"
    linkopts(javascript) += "+js_of_ocaml/weak.js"
    linkopts(javascript) += "+js_of_ocaml/classlist.js"

  )

  package "syntax" (
    description = "Syntax extension: spliting client and server code (client side)"
    version = "[distributed with Eliom]"
    directory = "syntax"
    package "base" (
      requires(syntax, preprocessor) = "%%NAME%%.syntax.common"
      requires(syntax, toploop) = "%%NAME%%.syntax.common"
      archive(syntax, preprocessor) = "pa_eliom_client_client.cmo"
      archive(syntax, toploop) = "pa_eliom_client_client.cmo"
    )
    requires(syntax, preprocessor) = "%%CSDEPS%%,%%NAME%%.client.syntax.base"
    requires(syntax, toploop) = "%%CSDEPS%%,%%NAME%%.client.syntax.base"
    requires(preprocessor, syntax, pkg_type_conv) = "type_conv"
    archive(syntax, preprocessor) = "-ignore dummy"
  )

)

package "type" (
  package "syntax" (
    description = "Syntax extension: spliting client and server code (type inference)"
    version = "[distributed with Eliom]"
    directory = "syntax"
    requires(preprocessor, syntax, pkg_type_conv) = "type_conv"
    requires(syntax, preprocessor) = "%%NAME%%.type.syntax.base,%%NAME%%.syntax"
    archive(syntax, preprocessor) = "-ignore dummy"
    package "base" (
      requires(syntax, preprocessor) = "%%NAME%%.syntax.common"
      archive(syntax, preprocessor) = "pa_eliom_type_filter.cmo"
    )
  )
)

package "syntax" (

  description = "Syntax extension: spliting client and server code"
  version = "[distributed with Eliom]"
  directory = "syntax"

  requires(syntax, preprocessor) = "%%SDEPS%%,%%CSDEPS%%,%%NAME%%.syntax.common"
  requires(syntax, toploop) = "%%SDEPS%%,%%CSDEPS%%,%%NAME%%.syntax.common"
  archive(syntax, preprocessor) = "-ignore dummy"

  package "common" (
    description = "Syntax extension: spliting client and server code (base)"
    version = "[distributed with Eliom]"
    requires = "camlp4"
    requires(preprocessor, syntax, pkg_type_conv) = "type_conv"
    archive(syntax, preprocessor) = "pa_eliom_seed.cmo"
  )
)

package "ocamlbuild" (

  description = "Eliom ocamlbuild plugin (js_of_ocaml part included)"
  version = "[distributed with Eliom]"
  directory = "ocamlbuild"
  requires = "js_of_ocaml.ocamlbuild"
  archive(byte) = "ocamlbuild_eliom.cma"
  archive(byte, plugin) = "ocamlbuild_eliom.cma"
  archive(native) = "ocamlbuild_eliom.cmxa"
  archive(native, plugin) = "ocamlbuild_eliom.cmxs"
)
